using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;

class Point<T>
{
    public T X;
    public T Y;

    public static void Print (Point<T> Point)
    {
        Console.Error.WriteLine("X: {0} Y: {1}", Point.X, Point.Y);
    }
}

class Solution
{
    static void Main (string[] args)
    {
        string[] inputs;
        int N = int.Parse(Console.ReadLine());
        int M = int.Parse(Console.ReadLine());
        int L = int.Parse(Console.ReadLine());

        List<Point<int>> Spots = new List<Point<int>>();
        List<Point<int>> Orcs = new List<Point<int>>();
        Dictionary<int, Tuple<int, int>> PathPointsIndices = new Dictionary<int, Tuple<int, int>>();
        int StartPointIndice;
        int StopPointIndice;

        for ( int i = 0 ; i < N ; i++ )
        {
            inputs = Console.ReadLine().Split(' ');
            int XS = int.Parse(inputs[0]);
            int YS = int.Parse(inputs[1]);
            Spots.Add(new Point<int> { X = XS, Y = YS });
        }
        for ( int i = 0 ; i < M ; i++ )
        {
            inputs = Console.ReadLine().Split(' ');
            int XO = int.Parse(inputs[0]);
            int YO = int.Parse(inputs[1]);
            Orcs.Add(new Point<int> { X = XO, Y = YO });
        }
        for ( int i = 0 ; i < L ; i++ )
        {
            inputs = Console.ReadLine().Split(' ');
            int N1 = int.Parse(inputs[0]);
            int N2 = int.Parse(inputs[1]);
            if ( N1 < N2 )
                PathPointsIndices.Add(i, new Tuple<int, int>(N1, N2));
            else
                PathPointsIndices.Add(i, new Tuple<int, int>(N2, N1));
        }
        StartPointIndice = int.Parse(Console.ReadLine());
        StopPointIndice = int.Parse(Console.ReadLine());

        Console.Error.WriteLine("Starting Point: ");
        Point<int>.Print(Spots[StartPointIndice]);
        Console.Error.WriteLine("Spots Points: ");
        Spots.ForEach(Point<int>.Print);
        PathPointsIndices.ToList().ForEach(a => Console.Error.WriteLine(a.Value));
        Orcs.ForEach(Point<int>.Print);
        Console.Error.WriteLine("Start: {0}.", StartPointIndice);
        Console.Error.WriteLine("Stop: {0}.", StopPointIndice);

        //Find posibilities paths
        Console.Error.WriteLine("Founded routes starting at {0}.", StartPointIndice);
        var routes = PathPointsIndices.Where(p => p.Value.Item1 == StartPointIndice).ToDictionary(i => i.Key, i => i.Value);
        routes.ToList().ForEach(a => Console.Error.WriteLine(a.Value));

        //Check which point is possible to go //path shorter than orcs has
        routes = routes.Where(r =>
           isPossible<int>(Spots[r.Value.Item1], Spots[r.Value.Item2], Orcs) == true
         ).ToDictionary(i => i.Key, i => i.Value);
        Console.Error.WriteLine("Possible routes");
        routes.ToList().ForEach(a => Console.Error.WriteLine(a.Value));

        foreach ( var r in routes )
        {
            Console.Error.WriteLine("Founded routes starting at {0}.", r.Value.Item2);
            var _routes = PathPointsIndices.
                Where(p =>
                {
                    return
                    p.Value.Item1 == r.Value.Item2 &&
                    isPossible<int>(Spots[p.Value.Item1], Spots[r.Value.Item2], Orcs) == true;
                }).ToDictionary(i => i.Key, i => i.Value);
            _routes.ToList().ForEach(a => Console.Error.WriteLine(a.Value));

            Console.Error.WriteLine("Possible routes");
            _routes.ToList().ForEach(a => Console.Error.WriteLine(a.Value));
        }

        HashSet<string> result = FindPaths(routes, PathPointsIndices,
           Orcs, Spots, StartPointIndice, StopPointIndice, "0");
        Console.Error.WriteLine("Result:");
        if ( result.Count != 0 )
        {
            result.ToList().ForEach(Console.Error.WriteLine);
            var ans = result.OrderBy(o => o.Length).ToList();

            Console.Error.WriteLine("Answer:");
            Console.WriteLine(ans.First());
        }
        else Console.WriteLine("IMPOSSIBLE");

        //Tests
        Console.Error.WriteLine("Tests:");
        Console.Error.WriteLine(calcDistance<int>(new Point<int> { X = 0, Y = 0 }, new Point<int> { X = 1, Y = 1 }));
        Console.Error.WriteLine(Math.Pow(2, 2));
        //var res = calcDistance<string> (new Point<string>{X="asd",Y="ds"}, new Point<string>{X="asd",Y="ds"});
    }

    public static double calcDistance<T> (Point<T> P1, Point<T> P2)
    {
        dynamic P11 = P1, P22 = P2;
        double dd = Math.Pow(P11.X - P22.X, 2) + Math.Pow(P11.Y - P22.Y, 2);
        return Math.Sqrt(dd);
    }

    public static bool isPossible<T> (Point<T> from, Point<T> to, List<Point<T>> Orcs)
    {
        var d1 = calcDistance(from, to);
        bool result = true;

        Orcs.ForEach(o =>
        {
            var d2 = calcDistance(o, to);
            if ( d2 <= d1 ) result = false;
        });

        return result;
    }

    public static HashSet<string> FindPaths (Dictionary<int, Tuple<int, int>> routes, Dictionary<int, Tuple<int, int>> PathPointsIndices,
            List<Point<int>> Orcs, List<Point<int>> Spots, int StartPointIndice, int StopPointIndice, string indices)
    {
        HashSet<string> stringRouts = new HashSet<string>();

        Console.Error.WriteLine("FindPaths:");

        string _indicies = indices;
        foreach ( var r in routes )
        {
            //Check whetever of given routes already goes to Stop(S) point.
            if ( r.Value.Item2 == StopPointIndice )
            {
                _indicies += " " + r.Value.Item2;
                stringRouts.Add(_indicies);
                break;
            }

            Console.Error.WriteLine("Founded routes starting at {0}.", r.Value.Item2);
            //Found possibly paths
            var _routes = PathPointsIndices.
                Where(p =>
                {
                    return
                        p.Value.Item1 == r.Value.Item2 &&
                        isPossible<int>(Spots[p.Value.Item1], Spots[r.Value.Item2], Orcs) == true);
                }).ToDictionary(i => i.Key, i => i.Value);
            Console.Error.WriteLine("Possible routes");
            _routes.ToList().ForEach(a => Console.Error.WriteLine(a));

            if ( _routes.Count != 0 )
            {
                stringRouts.UnionWith(
                  FindPaths(_routes, PathPointsIndices,
                        Orcs, Spots, StartPointIndice, StopPointIndice, _indicies + " " + r.Value.Item2)
                );
            }
        }
        return stringRouts;
    }
}